<div><font color="#444444">
<h2 class="margined">StyleGrader</h2>
<p align="justify" class="margined">

I architected and developed a static program analyzer framework for assessing the stylistics of computer programs developed by test candidates, in the context of programming skill assessment. In the process I stumbled across a very interesting problem in the theory of programming languages called the "Expression Problem,"<sup>[1]</sup> first described by Philip Wadler. Here's a note on some related ideas and the implementation:<br/>
<br/>
In functional programming, a typical (elegant) way to perform computation over items in list datatypes is using higher order functions such as map/filter/fold which provide a traversal abstraction to which one provides a function that does the actual computation (a function on an item for map, or a predicate for filter, a function over an item and an aggregate for fold). One of the reasons this is elegant is because, we see that there is Separation of Concerns (a fundamental idea in software engineering) with respect to the traversal code and the computation code.  One can imagine similar traversal structures for the tree datatype which are a generalization of the list datatype.<br/>
<br/>
A program is essentially a recursive data structure that can be represented in the form of a tree (a recursive datatype), an abstract syntax tree (AST), where each node represents a construct of the programming language occuring in the source code. To perform program analysis one may design an abstract traversal strcuture (a "fold" on trees). One would like to have different variants of AST nodes (through algebraic datatypes), and provide to the "tree-fold" a function which "pattern-matches" against these datatypes to perform appropriate computation (perhaps passing along contexts and results in an accumulator).<br/>
<br/>
Pattern-matching is the way dispatching of computation is done based on datatypes in functional programming paradigm (FP). As a result, we find that we group computation by functionality in FP, as opposed to grouping things by types as done in object oriented paradigm (OOP). This difference in the way we structure code has profound consequences on the extensibility of code. In FP, to add a new function, we wouldn't need to modify existing code but to add a new datatype variant we would have to modify all the functions that pattern-match against this datatype. On the other hand its easy to add a new subclass in OOP but to add new functionality we would have to modify code for all the classes. This problem of the difficulty in having both forms of extensibility is called the "Expression Problem".<br/>
<br/>
To achieve dispatch-through-pattern-matching behavior and to group our program analysis code by functionality (each checking independent issues in the program, and independently extensible as appropriate), in an OOP setting (such as in Java), we use a design pattern called the "Visitor Pattern". ANTLR is a tool that generates tokens, parsers, and "Visitor interfaces" given a grammar; one would be able to implement these visitor interfaces which are overloaded based on parameter types and hence provide pattern-matchin like semantics and enable grouping code by functionality.<br/>
<br/>
There could also be issues with the parse trees that ANTLR generates using the default grammars (supported by the ANTLR project) for the language. In Java for example the ASTs had suprious nodes. So, these trees needed some preprocessing which was done in a separate part (aspect) of the implementation using Aspect Oriented Programming (to prevent coupling between ANTLR and other code, which need to be maintained separately to be able to update ANTLR and other pieces independently).<br/>
<br/>
A taxonomy of candidate errors was constructed which the system detects and provides feedback on. Various software metrics are also evaluated as part of the code assessment. <br/>
<br/>
Some related XKCD funnies:<br/>
<br/> 
<img width="500px" src="./nishanthprakash_files/code_quality.png" style="margin:auto;display:block;">
</p>
<footer><hr>
<p align="justify" class="margined">
<a style="all:unset; color:#0000FF;" onmouseover="this.style.textDecoration='underline'; this.style.color='red';" onmouseout="this.style.textDecoration='none'; this.style.color='blue';" href="http://homepages.inf.ed.ac.uk/wadler/papers/expression/expression.txt" target="_blank">[1] <i>Wadler, Philip. "The expression problem." Java-genericity mailing list (1998).</i></a>
</p>
</footer>
</font>
</div>
